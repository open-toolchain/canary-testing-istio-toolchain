---
defaultBaseImageVersion: latest
properties:
- name: DEPLOYMENT_FILE
  value: ${DEPLOYMENT_FILE}
  type: text
- name: IBM_CLOUD_API_KEY
  value: ${API_KEY}
  type: secure
- name: APP_NAME
  value: ${CF_APP_NAME}
- name: COMMONS_HOSTED_REGION
  value: ${COMMONS_HOSTED_REGION}
  type: text
  default: "https://raw.githubusercontent.com/open-toolchain/commons/master"
stages:
- name: BUILD
  inputs:
  - type: git
    branch: ${GIT_BRANCH}
    service: ${GIT_REPO}    
  triggers:
  - type: commit
  properties:
  - name: DOCKER_ROOT
    value: ${DOCKER_ROOT}
    type: text
  - name: DOCKER_FILE
    value: Dockerfile
    type: text  
  jobs:
  - name: Pre-build check
    type: builder
    build_type: cr
    artifact_dir: ''
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_prebuild.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_prebuild.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/master/scripts/check_prebuild.sh")

      # Lints Dockerfile and checks presence of registry namespace.
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_prebuild.sh")
  - name: Build Docker image
    type: builder
    build_type: cr
    artifact_dir: output
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    namespace: ${REGISTRY_NAMESPACE}
    image_name: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      # copy the script below into your app code repo (e.g. ./scripts/build_image_buildkit.sh) and 'source' it from your pipeline job
      #    source ./scripts/build_image_buildkit.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/build_image_buildkit.sh")

      # This script does build a Docker image into IBM Container Service private image registry.
      # Minting image tag using format: BUILD_NUMBER-BRANCH-COMMIT_ID-TIMESTAMP
      # Also copies information into a build.properties file, so they can be reused later on by other scripts (e.g. image url, chart name, ...)
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/build_image_buildkit.sh")
      # check if doi is integrated in this toolchain
      if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
        ibmcloud login --apikey ${IBM_CLOUD_API_KEY} --no-region
        ibmcloud doi publishbuildrecord --branch ${GIT_BRANCH} --repositoryurl ${GIT_URL} --commitid ${GIT_COMMIT} \
          --buildnumber ${BUILD_NUMBER} --logicalappname ${IMAGE_NAME} --status pass
      fi
  - name: Tests
    type: tester
    script: |-
      #!/bin/bash
      # set -x
      if [ -f ./test/run-tests.sh ]; then
        source ./test/run-tests.sh
        IFS=';' read -ra locations <<< "$FILE_LOCATIONS"
        IFS=';' read -ra types <<< "$TEST_TYPES"
        if jq -e '.services[] | select(.service_id=="draservicebroker")' _toolchain.json; then
          ibmcloud login --apikey $IBM_CLOUD_API_KEY --no-region
          for i in "${!locations[@]}"
          do
            echo "$i ${locations[i]} ${types[i]}"
            ibmcloud doi publishtestrecord --logicalappname=${APP_NAME} --buildnumber=$BUILD_NUMBER --filelocation=${locations[i]} --type=${types[i]}
          done
        fi
      else
        echo "Test runner script not found: ./test/run-tests.sh"
      fi
- name: VALIDATE
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  jobs:
  - name: Vulnerability Advisor
    type: tester
    test_type: vulnerabilityadvisor
    use_image_from_build_input: true
    fail_stage: false
    target:
      region_id: ${REGISTRY_REGION_ID}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_vulnerabilities.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_vulnerabilities.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_vulnerabilities.sh")

      # Check for vulnerabilities of built image using Vulnerability Advisor
      SOURCE_BUILD_NUMBER=$BUILD_NUMBER
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_vulnerabilities.sh")
- name: PROD
  inputs:
  - type: job
    stage: BUILD
    job: Build Docker image
  triggers:
  - type: stage
  properties:
  - name: buildprops
    value: build.properties
    type: file
  - name: CLUSTER_NAMESPACE
    value: ${PROD_CLUSTER_NAMESPACE}
    type: text
  - name: APP_URL
    value: undefined
    type: text   
  jobs:
  - name: Pre-deploy check
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_predeploy.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_predeploy_kubectl.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_predeploy_kubectl.sh")

      # Checks the cluster is ready, has a namespace configured with access to the private
      # image registry (using an IBM Cloud API Key). It also configures Helm Tiller service to later perform a deploy with Helm.
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_predeploy_kubectl.sh")
      # Provision Redis when missing
      REDIS_MASTER=$( kubectl get deployments --namespace ${CLUSTER_NAMESPACE} -o json | jq -r '.items[].metadata | select (.name=="redis-master") | .name ' )
      if [ -z "${REDIS_MASTER}" ]; then
        kubectl apply -f redis-master-deployment.yaml --namespace ${CLUSTER_NAMESPACE}
        kubectl apply -f redis-master-service.yaml --namespace ${CLUSTER_NAMESPACE}
      fi
      REDIS_SLAVE=$( kubectl get deployments --namespace ${CLUSTER_NAMESPACE} -o json | jq -r '.items[].metadata | select (.name=="redis-slave") | .name ' )
      if [ -z "${REDIS_SLAVE}" ]; then
        kubectl apply -f redis-slave-deployment.yaml --namespace ${CLUSTER_NAMESPACE}
        kubectl apply -f redis-slave-service.yaml --namespace ${CLUSTER_NAMESPACE}
      fi
      # TODO - wait for redis initial provisioning
  - name: Check Istio config
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      # set -x

      # copy the script below into your app code repo (e.g. ./scripts/istio_check_install.sh) and 'source' it from your pipeline job
      #    source ./scripts/istio_check_install.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/istio_check_install.sh")

      # Check Istio installation in target cluster
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/istio_check_install.sh")
      
      # copy the script below into your app code repo (e.g. ./scripts/config_istio_canary.sh) and 'source' it from your pipeline job
      #    source ./scripts/config_istio_canary.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/config_istio_canary.sh")
      
      # Configure Istio gateway with a destination rule (stable/canary), and virtual service
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/istio_config_canary.sh")
  - name: Deploy to Kubernetes
    type: deployer
    target:
      api_key: ${API_KEY}
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |
      #!/bin/bash
      # uncomment to debug the script
      #set -x
      # copy the script below into your app code repo (e.g. ./scripts/deploy_kubectl.sh) and 'source' it from your pipeline job
      #    source ./scripts/deploy_kubectl.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/deploy_kubectl.sh")

      USE_ISTIO_GATEWAY=true
      # Perform a kubectl deploy of container image and check on outcome
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/deploy_kubectl.sh")
  - name: Health check
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      resource_group: ${PROD_RESOURCE_GROUP}
      api_key: ${API_KEY}
      kubernetes_cluster: ${PROD_CLUSTER_NAME}
    script: |-
      #!/bin/bash
      # uncomment to debug the script
      # set -x
      # copy the script below into your app code repo (e.g. ./scripts/check_health.sh) and 'source' it from your pipeline job
      #    source ./scripts/check_health.sh
      # alternatively, you can source it from online script:
      #    source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_health.sh")

      # Check liveness and readiness probes to confirm application is healthy
      source <(curl -sSL "${COMMONS_HOSTED_REGION}/scripts/check_health.sh")    